#include <iostream>

#include <unistd.h>
#include <getopt.h>

#include "sh.h"
#include "defs.h"
#include "dirs.h"
#include "clean.h"
#include "error.h"


// Raw strings
static const std::string help_message {
R"message(
Remove autogenerated files. These files are located in '.cp-build' directory of the working folder.

    Option          Description

    -h              Generate this help message.
    --help

    -w              Directory to be cleaned.
    --working-dir

)message"
};

namespace cptools::clean {

    // Global variables
    static struct option longopts[] = {
       { "help", no_argument, NULL, 'h' },
       { "working-dir", required_argument, NULL, 'w' },
       { 0, 0, 0, 0 }
    };

    // Auxiliary routines
    std::string usage()
    {
        return "Usage: " NAME " clean [-h] [-w working-dir]";
    }

    std::string help()
    {
        return usage() + help_message;
    }

    int remove_autogenerated_files(const std::string& target, std::ostream& out, std::ostream& err)
    {
        std::string build_dir { target + "/" + CP_TOOLS_BUILD_DIR };

        auto rc = cptools::sh::is_dir(build_dir);

        if (not rc)
        {
            out << "No autogenerated files found.\n";
            return CP_TOOLS_OK;
        }

        rc = cptools::sh::remove_dir(build_dir);

        if (rc != CP_TOOLS_OK)
        {
            err << "Error removing '" << build_dir << "'\n";
            return CP_TOOLS_ERROR_CLEAN_DELETE_FILES;
        }

        out << "Done.\n";
        return CP_TOOLS_OK;
    }

    // API functions
    int run(int argc, char* const argv[], std::ostream& out, std::ostream& err)
    {
        int option = -1;
        std::string target { "." };

        while ((option = getopt_long(argc, argv, "hw:", longopts, NULL)) != -1)
        {
            switch (option) {
            case 'h':
                out << help() << '\n';
                return 0;

            case 'w':
                target = std::string(optarg);
                break;

            default:
                err << help() << '\n';
                return CP_TOOLS_ERROR_CLEAN_INVALID_OPTION;
            }
        }

        return remove_autogenerated_files(target, out, err);
    }
}
